set nocompatible              " be iMproved, required
set clipboard=unnamed
"set nobackup
"set nowritebackup
"set noswapfile
set history=100
set nowrap

filetype off                  " required

set modelines=1

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
" Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'bling/vim-airline'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'stephenmckinney/vim-solarized-powerline'
Plugin 'scrooloose/syntastic'
Plugin 'valloric/YouCompleteMe'
Plugin 'airblade/vim-gitgutter'
Plugin 'edkolev/tmuxline.vim'
Plugin 'elzr/vim-json'
Plugin 'raimondi/delimitMate'
Plugin 'marijnh/tern_for_vim'
Plugin 'junegunn/vim-easy-align'
Plugin 'stephpy/vim-yaml'
Plugin 'digitaltoad/vim-jade'
Plugin 'vim-scripts/git-file.vim'
Plugin 'sheerun/vim-polyglot'
Plugin 'scrooloose/nerdcommenter'
Plugin 'heavenshell/vim-jsdoc'

" All of your Plugins must be added before the following line
call vundle#end()            " required
" Wrap gitcommit file types at the appropriate length
filetype indent plugin on
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
syntax enable
set foldmethod=syntax
set background=dark
colorscheme base16-eighties

set number

set ttimeoutlen=100

" NerdTree style in Explorer mode
let g:netrw_liststyle=3

" Hide vim's sw* files in netrw
let g:netrw_list_hide= '.*\.swp$,.*\.un\~$'

" Enable vim-airline
let g:airline#extensions#tabline#enabled = 1

" Enable tmux-airline
let g:airline#extensions#tmuxline#enabled = 1

let g:airline_powerline_fonts = 1
let g:airline_section_b = '%{strftime("%c")}'

" EasyAlign mappings
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Few options that just makes things better
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set undofile
nnoremap <F7> :setlocal spell! spelllang=en_us<CR>

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch

" Leader mappings
let mapleader = ","

" quick save
nnoremap <leader>w :update<CR>

" open .vimrc file on the fly in seperate split
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<CR>

" source .vimrc file
nnoremap <leader>sv :so $MYVIMRC<CR>

" remove highlighting from search results
nnoremap <leader><space> :noh<CR>

" toggle display of hidden symbols like tabs and trailing spaces
nnoremap <leader>l :set invlist<CR>

" delete buffer from current window substituting it with previous buffer
nnoremap <leader>x :bp\|bd #<CR>

nnoremap <tab> %
vnoremap <tab> %

" The next section makes Vim handle long lines correctly:
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

" Tab settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Highlight hidden characters
set listchars=tab:>·,trail:·

" Split settings
set splitright
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" CtrlP - files matched are ignored when expanding wildcards
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/build/*
let g:ctrlp_custom_ignore = {
      \ 'dir': '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }
" Ignore files in .gitignore
" let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Close buffer via <C-x> using CtrlP
let g:ctrlp_buffer_func = { 'enter': 'CtrlPMappings' }

function! CtrlPMapping()
  nnoremap <buffer> <silent> <C-x> :call <sid>DeleteBuffer()<cr>
endfunction

function! s:DeleteBuffer()
  let path = fnamemodify(getline('.')[2:], ':p')
  let bufn = matchstr(path, '\v\d+\ze\*No Name')
  exec "bd" bufn ==# "" ? path : bufn
  exec "norm \<F5>"
endfunction

" Syntastic tweaking
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
"set statusline+=%{fugitive#statusline()}

let g:syntastic_javascript_checkers = ['eslint', 'jscs']
let g:syntastic_always_populate_loc_list=1
let g:syntastic_check_on_open=1
let g:Syntastic_enable_signs=1

" Explore tweaking
" from http://ivanvbrennan.nyc/blog/2014/01/16/rigging-vims-netrw
fun! VexToggle(dir)
  if exists("t:vex_buf_nr")
    call VexClose()
  else
    call VexOpen(a:dir)
  endif
endf

fun! VexOpen(dir)
  let g:netrw_browse_split=4 "Open files in previous window
  let vex_width = 25

  execute "Vexplore " . a:dir
  let t:vex_buf_nr = bufnr("%")
  wincmd H

  call VexSize(vex_width)
endf

nnoremap <leader>` :call VexToggle("")<CR>

fun! VexClose()
  let cur_win_nr = winnr()
  let target_nr = ( cur_win_nr == 1 ? winnr("#") : cur_win_nr )

  1wincmd w
  close
  unlet t:vex_buf_nr

  execute (target_nr - 1) . "wincmd w"
  call NormalizeWidth()
endf

fun! VexSize(vex_width)
  execute "vertical resize" . a:vex_width
  set winfixwidth
  call NormalizeWidth()
endf

fun! NormalizeWidth()
  let eadir_pref = &eadirection
  set eadirection=hor
  set equalalways! equalalways!
  let &eadirection = eadir_pref
endf

augroup NetrwGroup
  autocmd! BufEnter * call NormalizeWidth()
augroup END

" Json highlighting
au! BufRead,BufNewFile *.json set filetype=json
au! BufRead,BufNewFile *.template set filetype=json
let g:vim_json_syntax_conceal = 0

" JsDoc syntax highlighting
au! BufRead,BufNewFile *.jsdoc set syntax=javascript

augroup json_autocmd
  autocmd!
  autocmd FileType json set autoindent
  autocmd FileType json set formatoptions=q2l
  autocmd FileType json set textwidth=78 shiftwidth=2
  autocmd FileType json set softtabstop=2 tabstop=8
  autocmd FileType json set expandtab
  "autocmd FileType json set foldmethod=syntax
augroup END

" Do not list netrw buffers
autocmd FileType netrw setl bufhidden=delete

" Append ; to end of the line and return to previous location
imap <C-c> <CR><Esc>A;<Esc>O

" Do not show Scratchpad for previewing code completion
set completeopt-=preview

" --- Strip trailing whitespace ---
function! StripWhitespace ()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

" Trailing white space (strip spaces)
noremap <leader>ss :call StripWhitespace()<CR>

" Copy and paste between Vim instances
let g:session_yank_file="~/.vim_temp"
map <silent> <Leader>y :call Session_yank()<CR>
vmap <silent> <Leader>y y:call Session_yank()<CR>
vmap <silent> <Leader>Y Y:call Session_yank()<CR>
nmap <silent> <Leader>p :call Session_paste("p")<CR>
nmap <silent> <Leader>P :call Session_paste("P")<CR>

function Session_yank()
  new
  call setline(1,getregtype())
  put
  silent exec 'wq! ' . g:session_yank_file
  exec 'bdelete ' . g:session_yank_file
endfunction

function Session_paste(command)
  silent exec 'sview ' . g:session_yank_file
  let l:opt=getline(1)
  silent 2,$yank
  if (l:opt == 'v')
    call setreg('"', strpart(@",0,strlen(@")-1), l:opt) " strip trailing endline ?
  else
    call setreg('"', @", l:opt)
  endif
  exec 'bdelete ' . g:session_yank_file
  exec 'normal ' . a:command
endfunction
